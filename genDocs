#!/usr/bin/env node

/**
 * This example script expects a path do components/plugins as input,
 * generating MD documentation files to docs/developer-guide/reference
 * e.g. node genDocs web/client/components
 */

var fs = require('fs');
var path = require('path');
var docsToMarkdown = require('react-docs-markdown');
var reactDocs = require('react-docgen');
var spawn = require('child_process').spawn;
var toc = require('markdown-toc');
var tocString = "";
var dir = process.argv[2];
filelist = [];
docFileList = [];
var fileContent = "";

var walkSync = function(dir, filelist) {
  files = fs.readdirSync(dir);
  files.forEach(function(file) {
      if (fs.statSync(path.join(dir, file)).isDirectory()) {
          filelist = walkSync(path.join(dir, file), filelist);
      }
      else {
          // FIXME: check only jsx files?
          checkExt(path.join(dir, file), '.jsx')
      }
  });
  // Create TOC at end
  tocContent = "TOC\n---\n\n"
  docFileList.forEach(function(file) {
    var name = getComponentName(file);
    tocString += toc('# ' + name + '\n\n').content + '\n';
  });
  tocContent += tocString;
  // FIXME: static output folder?
  fs.writeFile('docs/developer-guide/reference/index.md', tocContent, (err) => {
      if (err) throw err;
    });
}

function checkExt(file, ext) {
    if (path.extname(file) == ext) {
        //filelist.concat(file);
        const docgen = spawn('react-docgen', [ file ]);
        docgen.stdout.on('data', (data) => {
          componentInfo = `${data}`;
          //console.log(componentInfo);
          if (componentInfo.length > 1) {
              buildDocs(JSON.parse(data), file);
          }
        });
        docFileList.push(file);
    }
}

function buildDocs(doc, file) {
  // Extract filename as component name
  var name = getComponentName(file);
  // Use fs to write the markdown to dist
  var md = docsToMarkdown(doc, name);
  // FIXME: static output folder?
  fs.writeFile('docs/developer-guide/reference/' + name +'.md', md, (err) => {
    if (err) throw err;
  });
  console.log(file + ' -> ' + name + '.md');
}

function getComponentName(filepath) {
  var name = path.basename(filepath);
  var ext;
  while ((ext = path.extname(name))) {
    name = name.substring(0, name.length - ext.length);
  }
  return name;
}

walkSync(dir, filelist)